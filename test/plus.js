var chai = require('chai');
var expect = chai.expect;
var BigNumber = require("../src/infimath.js");

var tests = [
	// Each test is run as BigNumber(a).plus(b) === {data: c, decs: d, sign: e}
	// [a, [b], c, d, e]
	
	// 0 + any
	[    "0", [    0], [   0],  0,  0],
	[    "0", [    1], [   1],  0,  1],
	[    "0", [   -1], [   1],  0, -1],
	[    "1", [    0], [   1],  0,  1],
	[   "-1", [    0], [   1],  0, -1],
	
	// pos + pos
	[    "1", [    1], [   2],  0,  1],
	[    "1", [  999], [   1], -1,  1],
	[    "1", [ 1000], [1, 1],  0,  1],
	[  "999", [    1], [   1], -1,  1],
	[ "1000", [    1], [1, 1],  0,  1],
	
	// pos + neg
	[    "1", [   -1], [   0],  0,  0],
	[    "1", [   -2], [   1],  0, -1],
	[    "1", [-1001], [   1], -1, -1],
	[    "1", [-1002], [1, 1],  0, -1],
	[    "1", [-1003], [2, 1],  0, -1],
	[    "1", [-1000001], [1], -2, -1],
	[    "1", [-1000002], [1, 0, 1],  0, -1],
	["1000001", [-1], [   1], -2,  1],
	["1000002", [-1], [1, 0, 1],  0,  1],
	
	// neg + pos
	[   "-1", [    1], [   0],  0,  0],
	[   "-1", [    2], [   1],  0,  1],
	[   "-1", [ 1001], [   1], -1,  1],
	[   "-1", [ 1002], [1, 1],  0,  1],
	[   "-1", [ 1003], [2, 1],  0,  1],
	[   "-1", [1000001], [1],  -2,  1],
	[   "-1", [1000002], [1, 0, 1],  0,  1],
	["-1000001", [1], [   1], -2, -1],
	["-1000002", [1], [1, 0, 1],  0, -1],
	
	// neg + neg
	[   "-1", [   -1], [   2],  0, -1],
	[   "-1", [ -999], [   1], -1, -1],
	[   "-1", [-1000], [1, 1],  0, -1],
	
	// dec + dec
	[    "1", [  1.1], [100, 2],  1,  1],
	[  "1.1", [    1], [100, 2],  1,  1],
	[  "1.1", [  1.1], [200, 2],  1,  1],
	[ "7.86", [  2.4], [260,10],  1,  1],
	[  "0.1", [999.9], [     1], -1,  1],
	["999.9", [  0.1], [     1], -1,  1],
];

tests.forEach(function(test) {
	describe('BigNumber("' + test[0] + '").plus(' + test[1].join(", ") + ').calculate()', function() {
		var a = BigNumber.prototype.plus.apply(BigNumber(test[0]), test[1]).calculate();
		it('should have data of [' + test[2] + ']', function() {
			expect(a.data + '').to.equal(test[2] + '');
		});
		it('should have decs of ' + test[3], function() {
			expect(a.decs).to.equal(test[3]);
		});
		it('should have sign of ' + test[4], function() {
			expect(a.sign).to.equal(test[4]);
		});
	});
});
