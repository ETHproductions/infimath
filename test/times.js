var chai = require('chai');
var expect = chai.expect;
var BigNumber = require("../src/infimath.js");

var tests = [
	// Each test is run as BigNumber(a).times(b) === {data: c, decs: d, sign: e}
	// [a, [b], c, d, e]
	
	// 0 * any
	[    "0", [    0], [   0],  0,  0],
	[    "0", [    1], [   0],  0,  0],
	[    "0", [   -1], [   0],  0,  0],
	[    "1", [    0], [   0],  0,  0],
	[   "-1", [    0], [   0],  0,  0],
	
	// pos * pos
	[    "1", [    1], [   1],  0,  1],
	[    "1", [    2], [   2],  0,  1],
	[    "1", [ 1000], [   1], -1,  1],
	[    "2", [    1], [   2],  0,  1],
	[    "2", [    2], [   4],  0,  1],
	[ "1000", [ 1000], [   1], -2,  1],
	[    "1", [ 1e-1], [ 100],  1,  1],
	[    "1", [ 1e-2], [  10],  1,  1],
	[    "1", [ 1e-3], [   1],  1,  1],
	[ "1000", [ 1e-3], [   1],  0,  1],
	[ "1234", [.5678], [200, 665, 700],  2,  1],
	[ "123456789", [.123456789], [521, 190, 750, 578, 241, 15],  3,  1],
	
	// pos * neg
	[    "1", [   -1], [   1],  0, -1],
	[    "1", [   -2], [   2],  0, -1],
	[    "1", [-1000], [   1], -1, -1],
	[    "2", [   -2], [   4],  0, -1],
	[    "2", [  -20], [  40],  0, -1],
	[    "2", [ -200], [ 400],  0, -1],
	[    "2", [-2000], [   4], -1, -1],
	
	// neg * pos
	[   "-1", [    1], [   1],  0, -1],
	[   "-1", [    2], [   2],  0, -1],
	[   "-1", [ 1000], [   1], -1, -1],
	[   "-2", [    2], [   4],  0, -1],
	[   "-2", [   20], [  40],  0, -1],
	[   "-2", [  200], [ 400],  0, -1],
	[   "-2", [ 2000], [   4], -1, -1],
	
	// neg * neg
	[   "-1", [   -1], [   1],  0,  1],
	[   "-1", [   -2], [   2],  0,  1],
	[   "-1", [-1000], [   1], -1,  1],
	[   "-2", [   -2], [   4],  0,  1],
	[   "-2", [  -20], [  40],  0,  1],
	[   "-2", [ -200], [ 400],  0,  1],
	[   "-2", [-2000], [   4], -1,  1],
];

tests.forEach(function(test) {
	describe('BigNumber("' + test[0] + '").times(' + test[1].join(", ") + ').calculate()', function() {
		var a = BigNumber(test[0]);
		BigNumber.prototype.times.apply(a, test[1]);
		a.calculate();
		it('should have data of [' + test[2] + ']', function() {
			expect(a.data + '').to.equal(test[2] + '');
		});
		it('should have decs of ' + test[3], function() {
			expect(a.decs).to.equal(test[3]);
		});
		it('should have sign of ' + test[4], function() {
			expect(a.sign).to.equal(test[4]);
		});
	});
});
