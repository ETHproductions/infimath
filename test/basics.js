var chai = require('chai');
var expect = chai.expect;
var BigNumber = require("../src/infimath.js");

var tests = [
	// [test, data, decs, sign, toString] or
	// [test, true] if it should error.
		
	/************ Basic tests ************/
		
	// Positive
	[     "0", [  0   ],  0,  0,      "0"],
	[     "1", [  1   ],  0,  1,      "1"],
	[    "10", [ 10   ],  0,  1,     "10"],
	[   "100", [100   ],  0,  1,    "100"],
	[  "1000", [  1   ], -1,  1,   "1000"],
	[  "1234", [234, 1],  0,  1,   "1234"],
	[ "1,234", [234, 1],  0,  1,   "1234"],
	[ "1 234", [234, 1],  0,  1,   "1234"],
	[ "1_234", [234, 1],  0,  1,   "1234"],
	[ "  1  ", [  1   ],  0,  1,      "1"],
	[ "1,2,3", [123   ],  0,  1,    "123"],
		
	// Negative
	[    "-0", [  0   ],  0,  0,      "0"],
	[    "-1", [  1   ],  0, -1,     "-1"],
	[   "-10", [ 10   ],  0, -1,    "-10"],
	[  "-100", [100   ],  0, -1,   "-100"],
	[ "-1000", [  1   ], -1, -1,  "-1000"],
		
	// Decimal
	[   "0.0", [  0   ],  0,  0,      "0"],
	[   "0.1", [100   ],  1,  1,    "0.1"],
	[    ".1", [100   ],  1,  1,    "0.1"],
	[   ".01", [ 10   ],  1,  1,   "0.01"],
	[  ".001", [  1   ],  1,  1,  "0.001"],
	[ ".0001", [100   ],  2,  1, "0.0001"],
	["-.123456789", [789, 456, 123], 3, -1, "-0.123456789"],
		
	[      "1.2", [200,        1],  1,  1,      "1.2"],
	[    "12.34", [340, 12      ],  1,  1,    "12.34"],
	[  "123.456", [456, 123     ],  1,  1,  "123.456"],
	["1234.5678", [800,567,234,1],  2,  1,"1234.5678"],
		
	/************ Scientific notation tests ************/
		
	// Basic
	[    "0e0", [  0    ],  0,  0,        "0"],
	[    "0e1", [  0    ],  0,  0,        "0"],
	[    "1e0", [  1    ],  0,  1,        "1"],
	[    "1e1", [ 10    ],  0,  1,       "10"],
	[    "1e2", [100    ],  0,  1,      "100"],
	[    "1e3", [  1    ], -1,  1,     "1000"],
	[    "1e4", [ 10    ], -1,  1,    "10000"],
	[    "1e5", [100    ], -1,  1,   "100000"],
	[    "1e6", [  1    ], -2,  1,  "1000000"],
	[ "1234e5", [400,123], -1,  1,"123400000"],
	[".1234e5", [340, 12],  0,  1,    "12340"],
		
	// Positive exponent
	[    "1e+0", [  1    ],  0,  1,        "1"],
	[    "1e+1", [ 10    ],  0,  1,       "10"],
	[    "1e+2", [100    ],  0,  1,      "100"],
	[    "1e+3", [  1    ], -1,  1,     "1000"],
	[    "1e+4", [ 10    ], -1,  1,    "10000"],
	[    "1e+5", [100    ], -1,  1,   "100000"],
	[    "1e+6", [  1    ], -2,  1,  "1000000"],
	[ "1234e+5", [400,123], -1,  1,"123400000"],
	[".1234e+5", [340, 12],  0,  1,    "12340"],
		
	// Negative exponent
	[    "1e-0", [  1   ],  0,  1,          "1"],
	[    "1e-1", [100   ],  1,  1,        "0.1"],
	[    "1e-2", [ 10   ],  1,  1,       "0.01"],
	[    "1e-3", [  1   ],  1,  1,      "0.001"],
	[    "1e-4", [100   ],  2,  1,     "0.0001"],
	[    "1e-5", [ 10   ],  2,  1,    "0.00001"],
	[    "1e-6", [  1   ],  2,  1,   "0.000001"],
	[".1234e-5", [234, 1],  3,  1,"0.000001234"],
	[ "1234e-5", [340,12],  2,  1,    "0.01234"],
		
	// Negative number, positive exponent
	[    "-1e+0", [  1   ],  0, -1,        "-1"],
	[    "-1e+1", [ 10   ],  0, -1,       "-10"],
	[    "-1e+2", [100   ],  0, -1,      "-100"],
	[    "-1e+3", [  1   ], -1, -1,     "-1000"],
	[    "-1e+4", [ 10   ], -1, -1,    "-10000"],
	[    "-1e+5", [100   ], -1, -1,   "-100000"],
	[    "-1e+6", [  1   ], -2, -1,  "-1000000"],
	[ "-1234e+5", [400,123],-1, -1,"-123400000"],
	["-.1234e+5", [340,12],  0, -1,    "-12340"],
		
	// Negative number, negative exponent
	[    "-1e-0", [  1   ],  0, -1,          "-1"],
	[    "-1e-1", [100   ],  1, -1,        "-0.1"],
	[    "-1e-2", [ 10   ],  1, -1,       "-0.01"],
	[    "-1e-3", [  1   ],  1, -1,      "-0.001"],
	[    "-1e-4", [100   ],  2, -1,     "-0.0001"],
	[    "-1e-5", [ 10   ],  2, -1,    "-0.00001"],
	[    "-1e-6", [  1   ],  2, -1,   "-0.000001"],
	["-.1234e-5", [234, 1],  3, -1,"-0.000001234"],
	[ "-1234e-5", [340,12],  2, -1,    "-0.01234"],
		
	// Special cases
	[ ".1e+1", [  1   ],  0,  1,     "1"],
	[ ".1e+2", [ 10   ],  0,  1,    "10"],
	[".12e+2", [ 12   ],  0,  1,    "12"],
	[ "1.e-1", [100   ],  1,  1,   "0.1"],
	[ ".1e-1", [ 10   ],  1,  1,  "0.01"],
	[ "10e-1", [  1   ],  0,  1,     "1"],
	["12.e-2", [120   ],  1,  1,  "0.12"],
	[ "1.e-2", [ 10   ],  1,  1,  "0.01"],
	[ ".1e-2", [  1   ],  1,  1, "0.001"],
	["100e-2", [  1   ],  0,  1,     "1"],
	["120e-2", [200, 1],  1,  1,   "1.2"],
	[ "12e-2", [120   ],  1,  1,  "0.12"],
		
	/************ Invalid syntax tests ************/
		
	[ "error", true],
	[     ".", true],
	[    "1e", true],
	[   "1e+", true],
	[   "1e-", true],
	[   "e+1", true],
	[   "e-1", true],
	[  ".e+1", true],
];

tests.forEach(function(test) {
	describe('BigNumber("' + test[0] + '")', function() {
		var a = null, b = false;
		try {
			a = BigNumber(test[0]);
		} catch(e) {
			b = true;
		}
		if(test[1] === true) {
			it('should throw an error', function() {
				expect(b).to.equal(true);
			});
		} else {
			it('should have data of [' + test[1] + ']', function() {
				expect(a.data + '').to.equal(test[1] + '');
			});
			it('should have decs of ' + test[2], function() {
				expect(a.decs).to.equal(test[2]);
			});
			it('should have sign of ' + test[3], function() {
				expect(a.sign).to.equal(test[3]);
			});
			it('should convert to "' + test[4] + '"', function() {
				expect(a + '').to.equal(test[4]);
			});
		}
	});
});
